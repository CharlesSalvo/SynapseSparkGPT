{
	"name": "PromptFunction_Relational",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ApacheSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e0288e17-fab3-4842-b7e8-ef06e3e3a006"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2aa92634-96f9-45f8-a0aa-a3789b73ce2d/resourceGroups/rgp-salvo-sbx/providers/Microsoft.Synapse/workspaces/serengetidatalabzu7oys3i/bigDataPools/ApacheSpark",
				"name": "ApacheSpark",
				"type": "Spark",
				"endpoint": "https://serengetidatalabzu7oys3i.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Create UDFs 'tbl_prompt()) -> str'\")"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf\n",
					"from pyspark.sql.types import StringType, IntegerType\n",
					"\n",
					"@udf(returnType=StringType())\n",
					"def customer_prompt_udf():\n",
					"    return \"Generate a json containing banking customer information. The accountid field needs to be unique. Use the following json structure: \\\n",
					"{ \\\n",
					"        \\\"firstname\\\": \\\"\\\", \\\n",
					"        \\\"lastname\\\": \\\"\\\", \\\n",
					"        \\\"accountid\\\": \\\"\\\", \\\n",
					"        \\\"city\\\": \\\"\\\", \\\n",
					"        \\\"state\\\": \\\"\\\", \\\n",
					"        \\\"zipcode\\\": \\\"\\\" \\\n",
					"}\"\n",
					"\n",
					"@udf(returnType=StringType())\n",
					"def account_prompt_udf():\n",
					"    return \"Generate a json containing banking account infromation. Use the following json structure:: \\\n",
					"{ \\\n",
					"        \\\"accountid\\\": \\\"\\\", \\\n",
					"        \\\"balance\\\": \\\"\\\" \\\n",
					"}\"\n",
					"\n",
					"@udf(returnType=StringType())\n",
					"def transaction_prompt_udf(accountid: str) -> str:    \n",
					"    return \"Create a json containing a bank transaction for accountid \"+ accountid + \" Use the following json structure: \\\n",
					"{ \\\n",
					"    \\\"transaction date\\\": \\\"yyyy-mm-dd\\\", \\\n",
					"    \\\"accountid\\\": \\\"\\\", \\\n",
					"    \\\"amount\\\": \\\"\\\" \\\n",
					"} \"\n",
					"\n",
					"\n",
					"\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"UDFs created\")"
				],
				"execution_count": 22
			}
		]
	}
}