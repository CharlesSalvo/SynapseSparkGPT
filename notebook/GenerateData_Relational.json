{
	"name": "GenerateData_Relational",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ApacheSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9683d9f2-a7b0-4dc1-b5fa-802a1661e18e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2aa92634-96f9-45f8-a0aa-a3789b73ce2d/resourceGroups/rgp-salvo-sbx/providers/Microsoft.Synapse/workspaces/serengetidatalabzu7oys3i/bigDataPools/ApacheSpark",
				"name": "ApacheSpark",
				"type": "Spark",
				"endpoint": "https://serengetidatalabzu7oys3i.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run PromptFunction_Relational"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from synapse.ml.core.platform import find_secret\n",
					"\n",
					"# Fill in the following lines with your service information\n",
					"service_name = \"echostorai\" # Name of your OpenAI service\n",
					"deployment_name = \"text-davinci-003\" # Name of your deployment in OpenAI\n",
					"key = \"4d263a830b0d499b9096258cd2124a65\"  # replace this with your secret and keyvault\n",
					"\n",
					"# Note: a cartesian product of customers and restaurants will be generated\n",
					"NrOfCustomers = 10 # Set number of Customers\n",
					"NrOfAccounts =  10 # Set number of accounts\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dfcustomerids = spark.range(1,NrOfCustomers + 1) \\\n",
					"    .withColumnRenamed(\"id\", \"customerid\") \\\n",
					"    .withColumn(\"prompt\", customer_prompt_udf())\n",
					"\n",
					"display(dfcustomerids)\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dfaccountids = spark.range(1,NrOfAccounts + 1) \\\n",
					"    .withColumnRenamed(\"id\", \"accountid\") \\\n",
					"    .withColumn(\"prompt\", account_prompt_udf())\n",
					"\n",
					"display(dfaccountids)\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from synapse.ml.cognitive import OpenAICompletion\n",
					"\n",
					"OpenAICompletion = (\n",
					"    OpenAICompletion()\n",
					"    .setSubscriptionKey(key)\n",
					"    .setDeploymentName(deployment_name)\n",
					"    .setUrl(\"https://{}.openai.azure.com/\".format(service_name))\n",
					"    .setMaxTokens(2048)\n",
					"    .setPromptCol(\"prompt\")\n",
					"    .setErrorCol(\"error\")\n",
					"    .setOutputCol(\"response\")\n",
					")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import col\n",
					"\n",
					"df_customerobject = OpenAICompletion.transform(dfcustomerids) \\\n",
					"    .select(col('customerid'), col('response.choices.text').getItem(0).alias('customerobject'))\\\n",
					"    .cache()\n",
					"\n",
					"df_accountobject = OpenAICompletion.transform(dfaccountids) \\\n",
					"    .select(col('accountid'), col('response.choices.text').getItem(0).alias('accountobject'))\\\n",
					"    .cache()\n",
					"\n",
					"display(df_customerobject)\n",
					"display(df_accountobject)\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, DoubleType\n",
					"from pyspark.sql.functions import col, from_json\n",
					"\n",
					"schemaCustomer = StructType([ \\\n",
					"        StructField(\"firstname\", StringType(), False), \\\n",
					"        StructField(\"lastname\", StringType(), False), \\\n",
					"        StructField(\"accountid\", StringType(), False), \\\n",
					"        StructField(\"city\", StringType(), False), \\\n",
					"        StructField(\"state\", StringType(), False), \\\n",
					"        StructField(\"zipcode\", StringType(), False) \\\n",
					"        ])\n",
					"\n",
					"schemaAccount = StructType([ \\\n",
					"        StructField(\"accountid\", StringType(), False), \\\n",
					"        StructField(\"balance\", DoubleType(), False) \\\n",
					"        ])\n",
					"\n",
					"\n",
					"\n",
					"df_customer = df_customerobject.withColumn(\"json\",from_json(col(\"customerobject\"), schemaCustomer))\\\n",
					"    .select(col(\"customerID\"), col(\"json.*\"))\n",
					"\n",
					"df_account = df_accountobject.withColumn(\"json\",from_json(col(\"accountobject\"), schemaAccount))\\\n",
					"    .select(col(\"accountid\"), col(\"json.*\"))\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"display(df_customer)\n",
					"display(df_accountobject)\n",
					"\n",
					""
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import col, row_number, window, rand\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\n",
					"\n",
					"\n",
					"cross_joined_df = df_customer.crossJoin(df_restaurant) \\\n",
					"    .withColumn(\"prompt\", reviews_prompt_udf(col(\"restaurant\"), ((5 * rand()).cast(\"int\") + 1))) \\\n",
					"\n",
					"df_reviewobject = OpenAICompletion.transform(cross_joined_df) \\\n",
					"    .withColumn(\"reviewObject\",col('response.choices.text').getItem(0))\\\n",
					"    .select(col(\"customerid\"),col(\"restaurantid\"), col(\"reviewobject\")) \n",
					"\n",
					"\n",
					"schemaReview = StructType([ \\\n",
					"        StructField(\"reviewdate\", StringType(), False), \\\n",
					"        StructField(\"review\", StringType(), False), \\\n",
					"        StructField(\"rating\", IntegerType(), False) \\\n",
					"        ])\n",
					"\n",
					"\n",
					"df_review = df_reviewobject.withColumn(\"json\",from_json(col(\"reviewobject\"), schemaReview))\\\n",
					"    .select(col(\"restaurantid\"), col(\"customerid\"), col(\"json.*\"))\n",
					"\n",
					"display(df_review)"
				],
				"execution_count": null
			}
		]
	}
}